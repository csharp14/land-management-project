import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Replace "RuS_data.xlsx" with the name of your Excel file
df = pd.read_excel("RuS_data.xlsx")

# Convert the TIMESTAMP_START column to a datetime format
df["TIMESTAMP_START"] = pd.to_datetime(df["TIMESTAMP_START"], format="%Y%m%d%H%M")

# Extract year and month from the TIMESTAMP_START column
df["Year"] = df["TIMESTAMP_START"].dt.year
df["Month"] = df["TIMESTAMP_START"].dt.month

# List of variables to plot
variables = ["GPP_DT_VUT_REF", "NEE_VUT_REF", "RECO_DT_VUT_REF", "SW_IN_1_1_2"]
variable_labels = ["GPP", "NEE", "RECO", "SW_IN"]

# Loop through each year and month
for year in df["Year"].unique():
    for month in df["Month"].unique():
        # Filter data for the specific year and month
        df_month = df[(df["Year"] == year) & (df["Month"] == month)]

        # Replace -9999 values with 0 for SW_IN_1_1_2 and Soil Moisture
        df_month.loc[df_month["SW_IN_1_1_2"] == -9999, "SW_IN_1_1_2"] = 0
        df_month.loc[df_month["SWC_F_MDS_1"] == -9999, "SWC_F_MDS_1"] = 0

        # Create a figure for GPP, NEE, Reco, Temperature, Soil Moisture, Precipitation, and SW_IN_1_1_1
        fig, axs = plt.subplots(len(variables) + 3, 1, figsize=(12, 8))

        plt.suptitle(f"Monthly Analysis for {month:02d}/{year} (Selhausen Juelich)", fontsize=16)

        # Plot Temperature
        axs[0].plot(df_month["TIMESTAMP_START"], df_month["TA_F"], label="Temperature")
        axs[0].set_ylabel("Temperature")

        # Plot Soil Moisture
        axs[1].plot(df_month["TIMESTAMP_START"], df_month["SWC_F_MDS_1"], label="Soil Moisture")
        axs[1].set_ylabel("Soil Moisture")

        # Plot Precipitation
        axs[2].plot(df_month["TIMESTAMP_START"], df_month["P_F"], label="Precipitation")
        axs[2].set_ylabel("Precipitation")

        # Plot SW_IN_1_1_1
        axs[3].plot(df_month["TIMESTAMP_START"], df_month["SW_IN_1_1_2"], label="SW_IN_1_1_2")
        axs[3].set_ylabel("SW_IN_1_1_2")

        for i, variable in enumerate(variables[0:3]):  # Exclude SW_IN_1_1_1 from the loop
            # Plot Variables GPP, NEE, RECO
            axs[i + 4].plot(df_month["TIMESTAMP_START"], df_month[variable], label=variable_labels[i])
            axs[i + 4].set_ylabel(variable_labels[i])

        # Mark events for 2019
        events_2019 = [
           ("Fertilizer", "201904170000", "black"),
           ("Fertilizer", "201904180000", "black"),
           ("Tilling", "201904240000", "purple"),
           ("Tilling", "201904260000", "purple"),
           ("Sowing", "201904242330", "cyan"),
           ("Fertilizer", "201905230000", "black"),
           ("Pesticide", "201905232330", "red"),
           ("Pesticide", "201906180000", "red"),
           ("Irrigation", "201906182330", "blue"),
           ("Pesticide", "201906260000", "red"),
           ("Irrigation", "201906262330", "blue"),
           ("Pesticide", "201907020000", "red"),
           ("Irrigation", "201907022330", "blue"),
           ("Irrigation", "201907050000", "blue"),
           ("Pesticide", "201907090000", "red"),
           ("Fertilizer", "201907092330", "black"),
           ("Irrigation", "201907160000", "blue"),
           ("Irrigation", "201907170000", "blue"),
           ("Pesticide", "201907220000", "red"),
           ("Fertilizer", "201907222330", "black"),
           ("Pesticide", "201908040000", "red"),
           ("Irrigation", "201908042330", "blue"),
           ("Pesticide", "201908080000", "red"),
           ("Irrigation", "201908082330", "blue"),
           ("Pesticide", "201908170000", "red"),
           ("Irrigation", "201908172330", "blue"),
           ("Pesticide", "201909060000", "red"),
           ("Irrigation", "201909062330", "blue"),
           ("Pesticide", "201909170000", "red"),
           ("Irrigation", "201909172330", "blue"),
           ("Harvest", "201910030000", "gold"),
           ("Tilling", "201910260000", "purple"),
           ("Sowing", "201910262330", "cyan")
       ]

         # Mark events for 2020
        events_2020 = [
             ("Fertilizer", "202004070000", "black"),
             ("Fertilizer", "202005080000", "black"),
             ("Pesticide", "202005082330", "red"),
             ("Pesticide", "202005250000", "red"),
             ("Fertilizer", "202006030000", "black"),
             ("Harvest", "202007280000", "gold"),
             ("Hay bailing", "202007300000", "yellow"),
             ("Tilling", "202008120000", "purple"),
             ("Sowing", "202008260000", "cyan")
         ]
         
        # Mark events for 2021
        events_2021 = [
            ("Crop residue management", "202102100000", "pink"),
            ("Tilling", "202104210000", "purple"),
            ("Sowing", "202104212330", "cyan"),
            ("Pesticide", "202105200000", "red"),
            ("Pesticide", "202105290000", "red"),
            ("Fertilizer", "202106100000", "black"),
            ("Pesticide", "202106110000", "red"),
            ("Harvest", "202111070000", "gold"),
            ("Crop residue management", "202111072330", "pink"),
            ("Tilling", "202111250000", "purple")
        ]
         
         
         # Mark events for 2022
        events_2022 = [
             ("Fertilizer", "202204220000", "black"),
             ("Tilling", "202204230000", "purple"),
             ("Tilling", "202204240000", "purple"),
             ("Tilling", "202204300000", "purple"),
             ("Sowing", "202204302330", "cyan"),
             ("Pesticide", "202205170000", "red"),
             ("Pesticide", "202205250000", "red" ),
             ("Pesticide", "202206090000", "red"),
             ("Pesticide", "202206140000", "red"),
             ("Fertilizer", "202206180000", "black"),
             ("Pesticide", "202206210000", "red"),
             ("Pesticide", "202206290000", "red"),
             ("Irrigation", "202207050000", "blue"),
             ("Fertilizer", "202207110000", "black"),
             ("Pesticide", "202207120000", "red"),
             ("Irrigation", "202207122330", "blue"),
             ("Pesticide", "202207180000", "red"),
             ("Pesticide", "202207260000", "red"),
             ("Irrigation", "202207310000", "blue"),
             ("Pesticide", "202208060000", "red"),
             ("Fertilizer", "202208080000", "black"),
             ("Pesticide", "202208082330", "red"),
             ("Fertilizer", "202208180000", "black"),
             ("Pesticide", "202208182330", "red"),
             ("Pesticide", "202208310000", "red"),
             ("Crop residue management", "202209120000", "pink"),
             ("Pesticide", "202209230000", "red"),
             ("Harvest", "202210040000", "gold"),
             ("Crop residue management", "202210042330", "pink"),
             ("Tilling", "202210150000", "purple"),
             ("Sowing", "202210152330", "cyan")
         ]

        legend_labels = []  # Initialize the legend labels list
        legend_handles = []  # Initialize the legend handles list

        for event, date, color in events_2019:
            event_date = pd.to_datetime(date, format="%Y%m%d%H%M")
            if event_date.year == year and event_date.month == month:
                for ax in axs:
                    ax.axvline(x=event_date, color=color, linestyle='--')
                if event not in legend_labels:
                    legend_handles.append(plt.Line2D([0], [0], color=color, linestyle='--'))
                    legend_labels.append(event)

        for event, date, color in events_2020:
            event_date = pd.to_datetime(date, format="%Y%m%d%H%M")
            if event_date.year == year and event_date.month == month:
                for ax in axs:
                    ax.axvline(x=event_date, color=color, linestyle='--')
                if event not in legend_labels:
                    legend_handles.append(plt.Line2D([0], [0], color=color, linestyle='--'))
                    legend_labels.append(event)

        for event, date, color in events_2021:
            event_date = pd.to_datetime(date, format="%Y%m%d%H%M")
            if event_date.year == year and event_date.month == month:
                for ax in axs:
                    ax.axvline(x=event_date, color=color, linestyle='--')
                if event not in legend_labels:
                    legend_handles.append(plt.Line2D([0], [0], color=color, linestyle='--'))
                    legend_labels.append(event)
                    
        for event, date, color in events_2022:
            event_date = pd.to_datetime(date, format="%Y%m%d%H%M")
            if event_date.year == year and event_date.month == month:
                for ax in axs:
                    ax.axvline(x=event_date, color=color, linestyle='--')
                if event not in legend_labels:
                    legend_handles.append(plt.Line2D([0], [0], color=color, linestyle='--'))
                    legend_labels.append(event)                    

        # Set the x-axis limits to cover the entire month
        start_date = pd.to_datetime(f"{year}-{month:02d}-01")
        end_date = start_date + pd.DateOffset(months=1)
        axs[0].set_xlim(start_date, end_date)

        axs[-1].set_xlabel("Date")
        fig.legend(handles=legend_handles, labels=legend_labels, loc="center right")
        plt.tight_layout(rect=[0, 0, 0.9, 1])
        plt.subplots_adjust(right=0.8)

        # Show the figure
        plt.show()